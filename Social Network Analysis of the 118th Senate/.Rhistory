op <- par(mfrow = c(1, 1), mar = c(2, 0, 2, 0))
plot(induced_subgraph(R, lcR[[1]]),
vertex.size = 7,
vertex.label.cex = .5,
vertex.color = 'red',
vertex.label.degree = -pi * 3,
vertex.label.dist = .50,
vertex.label.font = 2,
vertex.label.color = "black",
asp = 0,
edge.width = E(R)$width * 3,
edge.color = adjustcolor("grey", alpha.f = 0.4),
main = "Largest Clique (Republican)")
plot(induced_subgraph(D, lcD[[1]]),
vertex.size = 8,
vertex.label.cex = .6,
vertex.color = 'royalblue'
vertex.label.degree = -pi * 2,
set.seed(13)
op <- par(mfrow = c(1, 1), mar = c(2, 0, 2, 0))
plot(induced_subgraph(R, lcR[[1]]),
vertex.size = 7,
vertex.label.cex = .5,
vertex.color = 'red',
vertex.label.degree = -pi * 3,
vertex.label.dist = .50,
vertex.label.font = 2,
vertex.label.color = "black",
asp = 0,
edge.width = E(R)$width * 3,
edge.color = adjustcolor("grey", alpha.f = 0.4),
main = "Largest Clique (Republican)")
plot(induced_subgraph(D, lcD[[1]]),
vertex.size = 8,
vertex.label.cex = .6,
vertex.color = 'royalblue',
vertex.label.degree = -pi * 2,
vertex.label.dist = .70,
vertex.label.font = 2,
vertex.label.color = "black",
asp = 0,
edge.width = E(R)$width * 3,
edge.color = adjustcolor("grey", alpha.f = 0.4),
main = "Largest Clique (Democrat)")
par(op)
knitr::opts_chunk$set(warning = FALSE)
library(igraph)
library(sna)
library(qgraph)
library(viridis)
smallC <- order(sizes)[1:4]
knitr::opts_chunk$set(warning = FALSE)
library(igraph)
library(sna)
library(qgraph)
library(viridis)
edge_list <- read.csv("~/Desktop/SNAfinal/edge_list.csv")
str(edge_list)
current_sen <- read.csv("~/Desktop/SNAfinal/current_sen.csv")
current_sen$name <- current_sen$icpsr
# only keeping some attributes
current_sen <- current_sen[, c("name", "bioname", "state_abbrev", "party_code")]
str(current_sen)
g <- graph_from_data_frame(d=edge_list, vertices=current_sen, directed=FALSE)
summary(g)
weights <- E(g)$weight
summary(weights)
hist(weights,
breaks = 30,
col = 'darkorchid4',
main = "Distribution of Edge Weights (Similar Voting Patterns)",
xlab = "Weight")
# setting threshold
threshold <- quantile(weights, probs = 0.55)
# removing edges
gT <- delete_edges(g, E(g)[weight <= threshold])
summary(gT)
components_info <- igraph::components(gT)
sizes <- components_info$csize
sizes
smallC <- order(sizes)[1:4]
for (i in smallC) {
nodes_in_component <- which(components_info$membership == i)
subgraph <- induced_subgraph(gT, nodes_in_component)
cat(sprintf("Component %d bionames:\n", i))
print(V(subgraph)$bioname)
print(V(subgraph)$party_code)
}
largest_component <- induced_subgraph(gT, which(components_info$membership == 1))
V(largest_component)$color <- ifelse(V(largest_component)$party_code == 100, "royalblue",
ifelse(V(largest_component)$party_code == 200, "red", "green4"))
E(largest_component)$width <- (E(largest_component)$weight - min(E(largest_component)$weight)) / (max(E(largest_component)$weight) - min(E(largest_component)$weight)) + 1e-6
V(largest_component)$label <- sapply(V(largest_component)$bioname, function(x) {
parts <- unlist(strsplit(x, " "))
parts <- unlist(strsplit(gsub(",", "", x), " "))
paste(parts[1])
})
set.seed(13)
e <- get.edgelist(largest_component, names = FALSE)
layout_q <- qgraph.layout.fruchtermanreingold(
e,
vcount = vcount(largest_component),
area = 8 * (vcount(largest_component)^2),
repulse.rad = vcount(largest_component)^3
)
par(mar = c(0, 0, 1.2, 0))
plot(largest_component,
layout = layout_q,
vertex.size = 7,
vertex.label.cex = .5,
vertex.label.degree = -pi * 3,
vertex.label.dist = .50,
vertex.label.font = 2,
vertex.label.color = "black",
asp = 0,
edge.width = E(gT)$width,
edge.color = adjustcolor("grey", alpha.f = 0.3),
main = "118th Congressional Senate")
edge_density(gT)
degree_centrality <- igraph::degree(gT)
names(degree_centrality) <- V(gT)$bioname
head(sort(degree_centrality, decreasing = TRUE))
head(sort(degree_centrality, decreasing = FALSE))
print(table(V(gT)[degree_centrality > 50]$party_code))
print(table(V(gT)[degree_centrality > 49]$party_code))
betweenness <- igraph::betweenness(gT, directed = FALSE, weights = E(gT)$weight, normalized = TRUE)
names(betweenness) <- V(gT)$bioname
sort(betweenness, decreasing = TRUE)[1:10]
lc_bet <- igraph::betweenness(largest_component, directed = FALSE, weights = E(gT)$weight, normalized = TRUE)
V(largest_component)$betweenness <- lc_bet + .5
# Since the betweenness scores are so low, I had to add .5, as adding epsilon was not enough
par(mar = c(0, 0, 1.2, 0))
plot(largest_component,
layout = layout_q,
vertex.size = V(largest_component)$betweenness * 8,
vertex.label.cex = .5,
vertex.label.degree = -pi * 3,
vertex.label.dist = .50,
vertex.label.font = 2,
vertex.label.color = "black",
asp = 0,
edge.width = E(gT)$width,
edge.color = adjustcolor("grey", alpha.f = 0.3),
main = "118th Congressional Senate Betweenness Centrality")
assortativity(gT, V(gT)$party_code, directed = FALSE)
set.seed(13)
com = cluster_leiden(gT, objective_function = "modularity")
modularity(gT, membership(com))
print(sizes(com))
small_communities <- which(membership(com) %in% c(3, 4, 5, 6))
data.frame(
Senator = V(gT)[small_communities]$bioname,
Party = V(gT)[small_communities]$party_code
)
set.seed(13)
com = cluster_leiden(largest_component, objective_function = "modularity")
modularity(largest_component, membership(com))
par(mar = c(0, 0, 1.2, 0))
plot(
largest_component,
layout = layout_q,
vertex.size = 7,
vertex.label.cex = .5,
vertex.label.degree = -pi * 3,
vertex.label.dist = .50,
vertex.label.font = 2,
vertex.label.color = "black",
asp = 0,
edge.width = E(gT)$width,
edge.color = adjustcolor("grey", alpha.f = 0.5),
mark.groups = communities(com),
main = "118th Congressional Senate Community Detection"
)
republican_vertices <- V(g)[party_code == 200]
gT_r <- igraph::induced_subgraph(g, vids = republican_vertices)
summary(gT_r)
Rweights <- E(gT_r)$weight
summary(Rweights)
hist(Rweights,
breaks = 30,
col = 'red',
main = 'Distribution of Republican Votes',
xlab = 'Weight')
rThreshold <- quantile(Rweights, probs=.55)
rThreshold
R <- delete_edges(gT_r, E(gT_r)[weight < rThreshold])
summary(R)
set.seed(13)
E(R)$width <- (E(R)$weight - min(E(R)$weight)) / (max(E(R)$weight) - min(E(R)$weight)) + 1e-6
V(R)$label <- sapply(V(R)$bioname, function(x) {
parts <- unlist(strsplit(x, " "))
parts <- unlist(strsplit(gsub(",", "", x), " "))
paste(parts[1])})
e <- get.edgelist(R, names = FALSE)
layout_q <- qgraph.layout.fruchtermanreingold(
e,
vcount = vcount(R),
area = 8 * (vcount(R)^2),
repulse.rad = vcount(R)^3
)
par(mar = c(0, 0, 1.2, 0))
plot(R,
layout = layout_q,
vertex.size = 7,
vertex.label.cex = .5,
vertex.color = 'red',
vertex.label.degree = -pi * 3,
vertex.label.dist = .50,
vertex.label.font = 2,
vertex.label.color = "black",
asp = 0,
edge.width = E(R)$width * 3,
edge.color = adjustcolor("grey", alpha.f = 0.5),
main = "Innerparty Voting Patterns (Republican)")
dem_vertices <- V(g)[party_code %in% c(100, 328)]
g_dem <- induced_subgraph(g, vids = dem_vertices)
summary(g_dem)
Dweights <- E(g_dem)$weight
summary(Dweights)
hist(Dweights,
breaks = 30,
col = 'royalblue',
main = 'Distribution of Democrat and Independent Votes',
xlab = 'Weight')
dT <- quantile(Dweights, prob = .55)
D <- delete_edges(g_dem, E(g_dem)[weight < dT])
summary(D)
set.seed(13)
V(D)$color <- ifelse(V(D)$party_code == 100, "royalblue","green4")
E(D)$width <- (E(D)$weight - min(E(D)$weight)) / (max(E(D)$weight) - min(E(D)$weight)) + 1e-6
V(D)$label <- sapply(V(D)$bioname, function(x) {
parts <- unlist(strsplit(x, " "))
parts <- unlist(strsplit(gsub(",", "", x), " "))
paste(parts[1])})
eD <- get.edgelist(D, names = FALSE)
layout_qD <- qgraph.layout.fruchtermanreingold(
eD,
vcount = vcount(D),
area = 8 * (vcount(D)^2),
repulse.rad = vcount(D)^3
)
par(mar = c(0, 0, 1.2, 0))
plot(D,
layout = layout_qD,
vertex.size = 7,
vertex.label.cex = .5,
vertex.color = V(D)$color,
vertex.label.degree = -pi * 3,
vertex.label.dist = .50,
vertex.label.font = 2,
vertex.label.color = "black",
asp = 0,
edge.width = E(D)$width * 3,
edge.color = adjustcolor("grey", alpha.f = 0.4),
main = "Innerparty Voting Patterns (Democrats)")
Dedge_density <- edge_density(D)
Redge_density <- edge_density(R)
edge_density_df <- data.frame(
Measure = "Edge Density",
Democrats = Dedge_density,
Republicans = Redge_density)
knitr::kable(
edge_density_df,
caption = "Edge Density for Democrats and Republicans"
)
degree_centralityD <- igraph::degree(D)
names(degree_centralityD) <- V(D)$bioname
d_top_degree <- sort(degree_centralityD, decreasing = TRUE)[1:10]
Rdegree_centrality <- igraph::degree(R)
names(Rdegree_centrality) <- V(R)$bioname
rTop_degree <- sort(Rdegree_centrality, decreasing = TRUE)[1:10]
top_degree_df <- data.frame(
Democrats = names(d_top_degree),
Degree_Dem = as.numeric(d_top_degree),
Republicans = names(rTop_degree),
Degree_Rep = as.numeric(rTop_degree)
)
knitr::kable(
top_degree_df,
caption = "Top Degree Centrality for Democrats and Republicans"
)
betweennessD <- igraph::betweenness(D, directed = FALSE, weights = E(D)$weight, normalized = TRUE)
names(betweennessD) <- V(D)$bioname
betweennessD <- sort(betweennessD, decreasing = TRUE)[1:10]
betweennessD <- round(betweennessD, 3)
Rbetweenness <- igraph::betweenness(R, directed = FALSE, weights = E(R)$weight, normalized = TRUE)
names(Rbetweenness) <- V(R)$bioname
Rbetweenness <- sort(Rbetweenness, decreasing = TRUE)[1:10]
Rbetweenness <- round(Rbetweenness, 3)
between_df <- data.frame(
Between_Dem = betweennessD,
Republicans = names(Rbetweenness),
Between_Rep = Rbetweenness
)
knitr::kable(
between_df,
caption = "Top Betweenness Centrality for Democrats and Republicans"
)
lcR <- largest.cliques(R)
lcD <- largest.cliques(D)
lcR
lcD
set.seed(13)
op <- par(mfrow = c(1, 1), mar = c(2, 0, 2, 0))
plot(induced_subgraph(R, lcR[[1]]),
vertex.size = 7,
vertex.label.cex = .5,
vertex.color = 'red',
vertex.label.degree = -pi * 3,
vertex.label.dist = .50,
vertex.label.font = 2,
vertex.label.color = "black",
asp = 0,
edge.width = E(R)$width * 3,
edge.color = adjustcolor("grey", alpha.f = 0.4),
main = "Largest Clique (Republican)")
plot(induced_subgraph(D, lcD[[1]]),
vertex.size = 8,
vertex.label.cex = .6,
vertex.color = 'royalblue',
vertex.label.degree = -pi * 2,
vertex.label.dist = .70,
vertex.label.font = 2,
vertex.label.color = "black",
asp = 0,
edge.width = E(R)$width * 3,
edge.color = adjustcolor("grey", alpha.f = 0.4),
main = "Largest Clique (Democrat)")
par(op)
set.seed(13)
Rcom <- cluster_leiden(R, objective_function = "modularity")
Rmod <- modularity(R, membership(Rcom))
Rmod
sizes(Rcom)
set.seed(13)
par(mar = c(0, 0, 1.2, 0))
plot(R,
layout = layout_q,
vertex.size = 7,
vertex.label.cex = .5,
vertex.color = 'red',
vertex.label.degree = -pi * 3,
vertex.label.dist = .50,
vertex.label.font = 2,
vertex.label.color = "black",
asp = 0,
edge.width = E(R)$width * 3,
edge.color = adjustcolor("grey", alpha.f = 0.5),
mark.groups = communities(Rcom),
main = "Modularity (Republican)")
set.seed(13)
comD <- cluster_leiden(D, objective_function = "modularity")
modularity(D, membership(comD))
sizes(comD)
set.seed(13)
par(mar = c(0, 0, 1.2, 0))
plot(D,
layout = layout_qD,
vertex.size = 7,
vertex.label.cex = .5,
vertex.color = V(D)$color,
vertex.label.degree = -pi * 3,
vertex.label.dist = .50,
vertex.label.font = 2,
vertex.label.color = "black",
asp = 0,
edge.width = E(R)$width * 3,
edge.color = adjustcolor("grey", alpha.f = 0.5),
mark.groups = communities(comD),
main = "Modularity (Democrats)")
degree_centrality <- igraph::degree(gT)
names(degree_centrality) <- V(gT)$bioname
dc <- head(sort(degree_centrality, decreasing = TRUE))
knitr::kable(
dc,
caption = "Degree Centrality for Senate"
)
smallC <- order(sizes)[1:4]
smallCDF <- data.frame(
Senator = V(smallC)$bioname,
)
smallC <- order(sizes)[1:4]
for (i in smallC) {
nodes_in_component <- which(components_info$membership == i)
subgraph <- induced_subgraph(gT, nodes_in_component)
print(V(subgraph)$bioname)
print(V(subgraph)$party_code)
}
lowDc <- head(sort(degree_centrality, decreasing = FALSE))
knitr::kable(
lowDc,
caption = "Lowest Senate Degree Centrality"
)
betweenness <- igraph::betweenness(gT, directed = FALSE, weights = E(gT)$weight, normalized = TRUE)
names(betweenness) <- V(gT)$bioname
sen_betweeness <- sort(betweenness, decreasing = TRUE)[1:10]
knitr::kable(
sen_betweeness,
caption = "Senate Betweenness"
)
knitr::opts_chunk$set(warning = FALSE)
library(igraph)
library(sna)
library(qgraph)
library(viridis)
smallC <- order(sizes)[1:4]
knitr::opts_chunk$set(warning = FALSE)
library(igraph)
library(sna)
library(qgraph)
library(viridis)
edge_list <- read.csv("~/Desktop/SNAfinal/edge_list.csv")
str(edge_list)
current_sen <- read.csv("~/Desktop/SNAfinal/current_sen.csv")
current_sen$name <- current_sen$icpsr
# only keeping some attributes
current_sen <- current_sen[, c("name", "bioname", "state_abbrev", "party_code")]
str(current_sen)
g <- graph_from_data_frame(d=edge_list, vertices=current_sen, directed=FALSE)
summary(g)
weights <- E(g)$weight
summary(weights)
hist(weights,
breaks = 30,
col = 'darkorchid4',
main = "Distribution of Edge Weights (Similar Voting Patterns)",
xlab = "Weight")
# setting threshold
threshold <- quantile(weights, probs = 0.55)
# removing edges
gT <- delete_edges(g, E(g)[weight <= threshold])
summary(gT)
components_info <- igraph::components(gT)
sizes <- components_info$csize
sizes
smallC <- order(sizes)[1:4]
for (i in order(sizes)[1:4] {
smallC <- order(sizes)[1:4]
for (i in smallC) {
smallC_nodes <- which(components_info$membership == i)
subgraph <- induced_subgraph(gT, smallC_nodes)
print(V(subgraph)$bioname)
print(V(subgraph)$party_code)
}
smallC <- order(sizes)[1:4]
for (i in smallC) {
smallC_nodes <- which(components_info$membership == i)
subgraph <- induced_subgraph(gT, smallC_nodes)
print(V(subgraph)$bioname)
}
smallC <- order(sizes)[1:4]
for (i in smallC) {
smallC_nodes <- which(components_info$membership == i)
subgraph <- induced_subgraph(gT, smallC_nodes)
print(V(subgraph)$bioname, V(subgraph)$party_code)
}
smallC <- order(sizes)[1:4]
for (i in smallC) {
smallC_nodes <- which(components_info$membership == i)
subgraph <- induced_subgraph(gT, smallC_nodes)
print(V(subgraph)$bioname + V(subgraph)$party_code))
smallC <- order(sizes)[1:4]
for (i in smallC) {
smallC_nodes <- which(components_info$membership == i)
subgraph <- induced_subgraph(gT, smallC_nodes)
print(V(subgraph)$bioname, V(subgraph)$party_code)
}
smallC <- order(sizes)[1:4]
for (i in smallC) {
smallC_nodes <- which(components_info$membership == i)
subgraph <- induced_subgraph(gT, smallC_nodes)
print(V(subgraph)$bioname)
print(V(subgraph)$party_code)
}
smallC <- order(sizes)[1:4]
for (i in smallC) {
smallC_nodes <- which(components_info$membership == i)
subgraph <- induced_subgraph(gT, smallC_nodes)
print(V(subgraph)$bioname)
print(V(subgraph)$party_code)
}
data.frame(
Senator = V(gT)[smallC]$bioname
)
smallC <- order(sizes)[1:4]
for (i in smallC) {
smallC_nodes <- which(components_info$membership == i)
subgraph <- induced_subgraph(gT, smallC_nodes)
print(V(subgraph)$bioname)
print(V(subgraph)$party_code)
}
data.frame(
Senator = V(gT)[smallC][1]$bioname
)
smallC <- order(sizes)[1:4]
for (i in smallC) {
smallC_nodes <- which(components_info$membership == i)
subgraph <- induced_subgraph(gT, smallC_nodes)
print(V(subgraph)$bioname)
print(V(subgraph)$party_code)
}
data.frame(
Senator = V(gT)[smallC][2]$bioname
)
set.seed(13)
e <- get.edgelist(largest_component, names = FALSE)
set.seed(13)
e <- get.edgelist(largest_component, names = FALSE)
set.seed(13)
e <- get.edgelist(largest_component, names = FALSE)
set.seed(13)
e <- get.edgelist(largest_component, names = FALSE)
